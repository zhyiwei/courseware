下面介绍了gem5目录结构中各个文件的作用

Read the SConscript file before reading other files because this will give you an understanding of how 
the files are linked to each other.

./build_opts/ 
Few files which set some variables used when building gem5. There is a file each for each ISA and each memory model
一些文件设置build gem所用到的变量，有一个文件对应各自的ISA和存储模型（？）

./configs/boot/ 
RCS scripts mainly used for running benchmarks in FS mode. It covers all the SPEC benchmarks
RCS脚本主要用于在FS模式下运行benchmark。它包括了所有的SPEC benchmark

./configs/common/

Benchmarks.py 
Configuration script used for running benchmarks in FS mode. It will set the SysConfiguration. 
SysConfig Class which contains scriptname, diskname and memsize. The disk containing benchmarks 
can be specified in this file for each ISA.
配置脚本，用于在FS mode下运行测试程序。它将会设置SysConfiguration。
SysConfig类包含了脚本名称，磁盘名称以及存储大小。每一个ISA的磁盘所包含的benchmark都可以在该文件中指定

Benchmarks are defined as a key in a dict which is a list of SysConfigs 
The first defined machine is the test system, the others are driving systems
benchmark被定义为dict中的一个key，其中dict是SysConfig的列表
第一个被定义的机器为测试系统，其他的为驱动系统

Different SysConfigs are defined for different benchmarks - by setting the script, memsize 
The scripts are located in ./configs/boot
不同的Sysconfig为不同的benchmark定义——通过设置脚本，存储大小
这些脚本被定位在./configs/boot

CacheConfig.py

Configures the cache system for the system being simulated. Based on the command line 
options given when gem5.opt is run, it creates the cache configuration to be used
配置所模拟系统中的cache系统。基于gem5.opt运行时所给出的命令行选项，它创建了要用到的cache配置

Caches.py

Defines default parameters of L1, L2, IO, PageTableWalker Cache
定义了的L1，L2，IO，PageTableWalker Cache的默认参数

CPUConfig.py

Builds the list of available CPU models and checks whether the option given on command line is an available CPU
建立了可用的CPU模型的列表，以及检查命令行所给的选项对CPU是否可用

FSConfig.py

Creates the different CPU models( MIPS, ALPHA, SPARC, etc.) for Full System simulation 
Address Ports, Memory Busses etc.
为全系统模拟创建不同的CPU模型（MIPS, ALPHA, SPARC等）
地址端口，存储总线等

O3ARMv7a.py

Defines the configuration parameters of ARMv7 CPU model. Various Functional Units, Branch Predictors, LSQs, caches, TLBs, etc. 
All classes derive from generic clasess used in basic O3 model
定义了ARMv7 CPU模式的配置参数。各种各样的功能单元，分支预测器，LSQ，cache，TLB等
所有分类起源于基础O3模型中所用的一般分类

Options.py

Defines all the command line options like –cpu-type, –cpu-number etc. 
system options, run duration options, checkpointing options, Fastforwarding and simpoint related materials, Benchmark options, 
FS options
定义了所有的命令行选项比如-cpu-type,–cpu-number等
系统选项，运行持续时间选项，检查点选项，快速转发以及simpoint related materials（？？？），基准测试选项
FS选项


Simulation.py

CPU models for restoring from checkpoint, initial fast-forwarding 
Defines functions to set the simulation configuration like max time, fast-forward or detailed, creating checkpoints, restoring from checkpoints, 
Switching CPUs, Actual Run after setting all these options, different types of switching are possible
CPU模型以用于从检查点回复，初始快速转发
定义了功能——用于设置模拟配置比如最大时间，快进或者细节，创建检查点，从检查点恢复
在设置了所有这些选项后切换CPU并实际运行，不同类型的切换时可能的（？）

SysPaths.py

Configures the paths for disks file, script file etc.
配置磁盘文件和脚本文件的路径

cpu2000.py

Configuration file for running SPEC2000 benchmarks
配置运行SPEC2000基准测试的文件

./config/examples

fs.py

Script to run FS simulation. Takes command line options and retrieves required information. Imports files from ./config/common
用于运行FS模拟的脚本。获取命令行选项以及检索需要的信息，写入./config/common中的文件

Similar files for testing memory system, running in SE mode. All of these import the files present in ./config/common
同样的文件用于测试存储系统，运行于SE模式，所有这些写入./config/common中存在的文件

./config/ruby

Scripts related to ruby memory system
用于关联ruby存储系统的脚本

./config/splash2

cluster.py

Configuration related to running splash2 parallel benchmarks 
Defines a class for each splash2 benchmark which inherits from LiveProcess class 
Each class contains info about executable, cmd, input variables 
Defines cache structure, number and type of clusters and number of cpus in a cluster - all obtained from command-line options 
Creates a system, adds system-wide objects, connects them. Picks the correct benchmark, assigns the workload ans runs the simulation
与运行splash2并行基准测试相关的配置
为每一个splash2基准测试定义了一个类，其继承了LiveProcess类
每一个类包含了有关可执行的，cmd，输入变量
定义了cache架构，数量和簇的种类以及簇中cpu的数目——所有这些均从命令行选项获得
创建了一个系统，添加全系统目标，连接他们，挑选正确的基准，分配工作量并且运行模拟

run.py

Same as cluster.py with minor changes - clusters are not present
与cluster.py基本类似，只有一些小的改变——簇没有出现

./config/topologies

Topologies for memory controllers
存储控制器的拓扑结构

./system

Low level software like firmware or bootloaders for use in simulated systems.
低层次软件，比如模拟系统中用到的固件或者引导装载程序

alpha - Alpha console and palcode. 
arm - A simple ARM bootloader.


BASE

./src/base/

types.hh

Defines global host-dependent types:
定义了全局依赖主机的类型：
Counter, Tick, and (indirectly) {int,uint}{8,16,32,64}_t. 
Cycles class, Addr, MicroPC, MicroPC operations,



flags.hh

Defines flag class, functions for modifying flags like set, unset etc.
定义了flag类，修改标志的功能比如set，unset等

output.hh

Handles printing of data to an output stream
操作数据打印到一个输出流中

./src/base/stats/

types.hh

Namespace Stats- Defines some basic stats types like Counter, VCounter, Result
Namespace Stats——定义了一些基础的stat类型比如Counter, VCounter, Result

info.hh

Info class to store information about various types of Stat like name, desc. 
For Distributions, 2d-Vectors etc. we store min_val, max_val etc.
Info类用于存储有关各类stat比如name，desc的信息
对于Distributions, 2d-Vectors等，我们存储min_val，max_val等


output.hh, text.hh, text.cc Printing of stats to output stream
将stat打印到输出流中

./src/base/vnc/

Vnc.py

VncInput class which derives from SimObject class 
VncServer class which derives from VncInput
VncInput类源自于SimObject类
VncServer类源自于VncInput类

Some files related to handling input to vncserver and setting up 
a vncserver
一些文件关联到输入进vncserver的操作以及设置一个vncserver


./src/base/loader/

object_file.hh

Class Object File - Architecture, OS. Mainly deals with how to read data from an object file
类对象文件——体系结构，操作系统，主要处理如何从一个对象文件中读取数据

All files in this folder provide some classes which can be used to read various types of object files
这个文件夹中的所有文件提供了一些类，这些类可用于读取各种类型的对象文件

refcnt.hh

RefCounted and RefCountingPtr classes which enable a class to be reference counted and provide automatic 
reference counting respectively.
RefCounted和RefCountingPtr类，其使一个类可被引用计数并且提供自动的分别引用计算

ARCH

./src/arch/generic/

Generic classes which can be used to perform specific functions using any ISA like decode_cache, debug_fualts, memhelpers.hh
一般的类，可用于使用任何ISA执行特定的功能，比如decode_cache, debug_fualts, memhelpers.hh

./src/arch/arm/

./insts

Classes which define what each instruction will do and to access information about instructions like branch, mem, misc, mult, etc.

./isa

./decoder

.isa files which define how to decode an arm.thumb instruction

./formats

.isa files which define various instruction formats like m5ops, branch, mem, etc.

./insts

Declarations of execution methods used for different types

PYTHON FOLDER

./m5/util/convert - Functions to convert a given string to numerical values related to memory size, clock period, network bandwidth etc.

./m5/util/attrdict - Modified Dict types with capability to add and delete attributes and a heirarchical structure

./m5/util/multidict - Dict of Dict and so on

./m5/util/orderdict - Ordered Dict

./m5/util/smartdict - Dictionary class that holds strings, but intelligently converts those strings to other types depending on their usage

./m5/util/sortedict -

./m5/util/region - Places data in regions and determines the type of overlap between two regions

./m5/util/init - Defines the error calls - panic, fatal, warn and inform. Several other utility functions

./m5/internal/params.py - A simple function to load all modules starting with m5.internal.params

./m5/internal/init - Imports some modules used in the simulator like core, event, stats, etc.

./m5/objects/init - Imports all modules starting with m5.objects

./m5/config.py - Directory settings for m5

./m5/debug.py - Extracting debug flags from m5 and printing them

./m5/event.py - Defines Event and Progress Event classes and related functions

./m5/main.py - The main script invoked when gem5 is run. Option parsing, gem5 interactive console , main function which prints info while gem5 is running

./m5/options.py Option parser

./m5/params.py - Parameter description classes. Each class has a _params dictionary which maps parameter names to Param objects. Functions which generate C++ code 
needed as a pre-requisite for declaring certain C++ objects. Defines several functions which deal with parameters

./m5/proxy.py - Proxy object support

./m5/ticks.py - Setting simulation accuracy and global frequency

./m5/SimObject.py -

./m5/simulate.py - Functions to instantiate Simobjects used in the system, create checkpoints, restore from checkpoints, switch cpus etc. 
In short, this script is responsible for starting and ending a simulation

./m5/stats/init - Initialization, resetting, dumping, et. of statistics

./swig

Swig files for the main module defined in m5

SIMULATION FOLDER

./src/sim

./arguments.hh 
Class arguments which has a thread context, number, data and methods which change or compare number field

./async.hh 
Defines flags used to handle asynchronous simulator events

./byteswap.hh 
Provides endianness coversion utility functions

./clocked_object.hh 
The ClockedObject class extends the SimObject with a clock and accessor functions to relate ticks to the cycles of the object.

./core.hh 
Core simulator functionality such as time information, output directory and exit events. Few simple functions

./eventq.hh 
Class Event derives from Serializable and is a friend of class EventQueue. EventQueueManager

./serialize.hh 
Serialization interface declarations

./debug.hh 
Provides the definitions for some useful debugging functions. These are intended to be called from a debugger such as gdb

./drain.hh 
Coordinates draining of a system. Drainable class. Functions to perform draining

./faults.hh 
Various types of faults, their names and invoking functions.

./init.hh 
EmbeddedPython, EmbeddedSwig structs. Some initialization function and handler functions

./insttracer.hh 
Class InstRecord. Class InstTracer which mostly derives from SimObject

./microcoderom.hh 
Generic stub microcode ROM ISAs can use if they don’t need anything more

./main.cc

Sets up python and then calls initM5Python which loads the various embedded python modules 
into the python environment and then starts things running by calling m5Main.

./syscallreturn.hh

Class SyscallReturn. Successful and retval fields

./process.hh

All the details that are related to a process running on a cpu 
class Process deriving from SimObject 
class LiveProcess deriving from Process

./pseudo_inst.hh

PseudoInst namespace which defines several functions which behave like instructions and 
perform several operations on a ThreadContext

./root.hh 
The root SimObject in the simulation hierarchy

serialize.hh

Functions to create and restore from checkpoints 
Serialize - create checkpoints Unserialize - Restore from checkpoints

./sim_events.hh 
Event to terminate simulation at a particular cycle/instruction 
CountedDrainEvent, CountedExitEvent 
Used to terminate simulation after some special event

./sim_exit.hh 
Functions which return the control to python after ending simulation

./sim_object.hh

Abstract superclass for simulation objects. Represents things that 
correspond to physical components and can be specified via the 
config file (CPUs, caches, etc.).

Methods used in starting and running a simulation

./simulate.hh 
simulate method which returns SimLoopExitEvent

./stat_control.hh 
Events related to dumping, resetting and registering statistics

./syscall_emul.hh

Defines objects used to emulate syscalls from the target 
application on the host machine.

./syscallreturn.hh

SysCallReturn Class which decodes the return value of a system call

./system.hh

Classes which define the system, ports, connections between system components

./tlb.hh

BaseTLB and GenericTLB classes

CPU

./src/cpu/

timebuf.hh

TimeBuffer and Wire classes. Friends of each other. Wire contains TimeBuffer 
Used for sending data between two objects

activity.hh

Activity Recorder helper class that informs the CPU if it can switch over to being idle or not

base.hh

CPUProgressEvent deriving from Event 
BaseCPU deriving from MemObject

cpuevent.hh

CpuEvent class- Helps form a global list of events which need a pointer to a ThreadContext

decodecache.hh

Cache of recent Virtual Memory decodings and retrieval mechanisms from cache

exec_context.hh

ExecContext - Not a usable class. Only to demonstrate how ISA accesses CPU state

fudesc.hh

FuDesc and OpDesc classes which define a functional unit and its operations.

inst_seq.hh

Used to order instructions in the ready list

static_inst.hh

StaticInst class - Machine Inst, Flags, OpClass, Num of Src, Dest regs, Flag Accessor Functions

thread_context.hh

ThreadContext Class Accessor and Modifier functions for all registers, memory ports and most of the 
architectural state of a CPU. It is a virtual class. 
So, we make use of ProxyThreadContext class to prevent the overhead of virtual callprevent the overhead of virtual calls

profile.hh

ProfileNode and FunctionProfile classes

thread_state.hh

Struct for holding general thread state that is needed across CPU models. 
Very similar to thread_context with minor changes

smt.hh

Changing the thread state and priority for smt support

translation.hh

Captures the state of an address translation 
WholeTranslationState and DataTranslation Classes

exectrace.hh 
ExeTraceRecord and ExeTracer classes

simple_thread.hh 
The SimpleThread object provides a combination of the ThreadState 
object and the ThreadContext interface

quiesce_event.hh 
EndQuiesceEvent for timing out a quiesce instruction

intr_control.hh 
Class to clear and post instructions of a particular CPU

legiontrace.hh 
LegionTraceRecord and LegionTrace

pc_event.hh 
PCEventQueue class which contains PCEvent class objects

base_dyn_inst.hh 
Defines a dynamic instruction context 
All the functions and processes that happen in a simple processor 
are defined in this class. Including functions for writing, reading memory, 
starting and ending translation etc.

Python Files 
These files define the Python Objects, methods, files which point to the 
corresponding C++ object, using Cxx header and Cxx class variables

CHECKER

./src/cpu/checker/

thread_context.hh 
Derived ThreadContext class for use with the Checker. The template 
parameter is the ThreadContext class used by the specific CPU being 
verified. This CheckerThreadContext is then used by the main CPU in 
place of its usual ThreadContext class. It handles updating the 
checker’s state any time state is updated externally through the 
ThreadContext.

CheckerThreadContext - Actual Thread Context, Checker Thread, Checker CPU

cpu.hh 
CheckerCPU class derives from BaseCPU class. 
BaseCPU is an abstract class. So CheckerCPU 
has most of the methods and members replicated 
Templated Checker Class deriving from CheckerCPU 
which handles the checking/verifying functions

cpu_impl.hh

SIMPLE

./src/cpu/simple

base.hh 
BaseSimpleCPU derives from BaseCPU 
CheckPcEventQueue - Seems to be the main function 
which moves instructions forward 
Lots of stats variables

atomic.hh 
AtomicSimpleCPU derives from BaseSimpleCPU 
TickEvent Struct containing a CPU, TickEvent, Process methods 
Main simulation loop - tick method

timing.hh 
Class SplitMainSenderState to split memory access into two fragments 
It has some TLB and memory access functions in addition to 
Atomic functionality

PREDICTOR

./src/cpu/pred

btb.hh 
DefaultTLB class 
Very simple and straight forward implementation of BTB

ras.hh 
ReturnAddrStack class

sat_counter.hh 
Private counter class for the internal saturating counters. 
Implements an n bit saturating counter and provides methods to 
increment, decrement, and read it

bpred_unit.hh 
Wrapper class to hold both the Branch Predictor and BTB 
Predictor Histroy Struct to maintain information required to 
update BTB, RAS etc.

tournament.hh 
Implements a tournament branch predictor 
TournamentBP inherits from BPredUnit

2bit_local.hh 
Implements a local predictor that uses the PC to index into a table of 
counters. Contains a list of saturating counters.

OUT OF ORDER

./src/cpu/o3/

base_dyn_inst.cc 
Makes an explicit instantiation of BaseDynInst templated class with 
O3CPUImpl

checker.hh 
Specific non-templated O3Checker derived class used for SimObject configuration.

comm.hh 
Structures that define the information passed on from one stage to another stage of 
a superscalar pipeline 
Each struct contains a list of DynInstPtr 
Per thread variable like branchmisPredict, branchTaken etc. 
A special structure which defines all backward communication - TimeBufStruct

commit.hh 
Templated DefaultCommit Class 
Has pointers to all the important structures and stages in the CPU 
All the important architectural updates are handled

decode.hh 
Because instructions are actually decoded when the StaticInst is created, 
this stage does not do much other than check any PC-relative branches 
DefaultDecode - Very similar to DefaultCommit class

dep_graph.hh 
Array of linked list that maintains the dependencies between 
producing instructions and consuming instructions

dyn_inst.hh 
BaseO3DynInst deriving from BaseDynInst

fetch.hh 
DefaultFetch Class

free_list.hh 
SimpleFreeList class that simply holds the list of free integer and floating 
point registers.

fu_pool.hh 
FUPool class which maintains a list of arrays of FUunits with a specific 
Capability

impl.hh 
Implementation specific struct that defines several key types to the 
CPU, the stages within the CPU, the time buffers, and the DynInst.

inst_queue.hh 
Instruction Queue which holds and schedules intructions 
Gets information from FUs and MemUnit to track dependencies and 
resource availability

lsq_unit.hh 
LSQUnit Class which implements Load and Store Queues

lsq.hh 
LSQ class Templated with Impl

mem_dep_unit.hh 
Memory Dependency Predictor

regfile.hh 
Simple physical register file class. 
Methods to set and read int and fp registers

scoreboard.hh 
Implements a simple scoreboard to track which registers are ready

rob.hh 
ROB class. The ROB is largely what drives squashing.

rename.hh 
DefaultRename Class which handles both single threaded and SMT rename

thread_context.hh 
Derived ThreadContext for use with O3CPU

thread_state.hh 
O3ThreadState class that has various thread state, such as the status, the 
current instruction being processed, whether or not the thread has 
a trap pending or is being externally updated, the ThreadContext 
pointer, etc.

store_set.hh 
Implements a store set predictor for determining if memory insts 
are dependent on each other

deriv.hh 
DeriveO3CPU derived from templated FullO3CPU

iew.hh 
DefaultIEW class which implements the iew stage of the pipeline

cpu_policy.hh 
SimpleCPUPolicy Struct that defines the key classes to be used by the CPU. 
All classes use the typedefs defined here to determine what are the 
classes of the other stages and communication buffers.

cpu.hh 
BaseO3CPU deriving from BaseCPU 
FullO3CPU deriving from BaseO3CPU 
FullO3CPU class has each of the stages (fetch through commit) 
within it, as well as all of the time buffers between stages.
