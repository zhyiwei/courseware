下面介绍了gem5目录结构中各个文件的作用

Read the SConscript file before reading other files because this will give you an understanding of how 
the files are linked to each other.

./build_opts/ 
Few files which set some variables used when building gem5. There is a file each for each ISA and each memory model
一些文件设置build gem所用到的变量，有一个文件对应各自的ISA和存储模型（？）

./configs/boot/ 
RCS scripts mainly used for running benchmarks in FS mode. It covers all the SPEC benchmarks
RCS脚本主要用于在FS模式下运行benchmark。它包括了所有的SPEC benchmark

./configs/common/

Benchmarks.py 
Configuration script used for running benchmarks in FS mode. It will set the SysConfiguration. 
SysConfig Class which contains scriptname, diskname and memsize. The disk containing benchmarks 
can be specified in this file for each ISA.
配置脚本，用于在FS mode下运行测试程序。它将会设置SysConfiguration。
SysConfig类包含了脚本名称，磁盘名称以及存储大小。每一个ISA的磁盘所包含的benchmark都可以在该文件中指定

Benchmarks are defined as a key in a dict which is a list of SysConfigs 
The first defined machine is the test system, the others are driving systems
benchmark被定义为dict中的一个key，其中dict是SysConfig的列表
第一个被定义的机器为测试系统，其他的为驱动系统

Different SysConfigs are defined for different benchmarks - by setting the script, memsize 
The scripts are located in ./configs/boot
不同的Sysconfig为不同的benchmark定义——通过设置脚本，存储大小
这些脚本被定位在./configs/boot

CacheConfig.py

Configures the cache system for the system being simulated. Based on the command line 
options given when gem5.opt is run, it creates the cache configuration to be used
配置所模拟系统中的cache系统。基于gem5.opt运行时所给出的命令行选项，它创建了要用到的cache配置

Caches.py

Defines default parameters of L1, L2, IO, PageTableWalker Cache
定义了的L1，L2，IO，PageTableWalker Cache的默认参数

CPUConfig.py

Builds the list of available CPU models and checks whether the option given on command line is an available CPU
建立了可用的CPU模型的列表，以及检查命令行所给的选项对CPU是否可用

FSConfig.py

Creates the different CPU models( MIPS, ALPHA, SPARC, etc.) for Full System simulation 
Address Ports, Memory Busses etc.
为全系统模拟创建不同的CPU模型（MIPS, ALPHA, SPARC等）
地址端口，存储总线等

O3ARMv7a.py

Defines the configuration parameters of ARMv7 CPU model. Various Functional Units, Branch Predictors, LSQs, caches, TLBs, etc. 
All classes derive from generic clasess used in basic O3 model
定义了ARMv7 CPU模式的配置参数。各种各样的函数单元，分支预测器，LSQ，cache，TLB等
所有分类起源于基础O3模型中所用的一般分类

Options.py

Defines all the command line options like –cpu-type, –cpu-number etc. 
system options, run duration options, checkpointing options, Fastforwarding and simpoint related materials, Benchmark options, 
FS options
定义了所有的命令行选项比如-cpu-type,–cpu-number等
系统选项，运行持续时间选项，检查点选项，快速转发以及simpoint related materials（？？？），基准测试选项
FS选项


Simulation.py

CPU models for restoring from checkpoint, initial fast-forwarding 
Defines functions to set the simulation configuration like max time, fast-forward or detailed, creating checkpoints, restoring from checkpoints, 
Switching CPUs, Actual Run after setting all these options, different types of switching are possible
CPU模型以用于从检查点回复，初始快速转发
定义了函数——用于设置模拟配置比如最大时间，快进或者细节，创建检查点，从检查点恢复
在设置了所有这些选项后切换CPU并实际运行，不同类型的切换时可能的（？）

SysPaths.py

Configures the paths for disks file, script file etc.
配置磁盘文件和脚本文件的路径

cpu2000.py

Configuration file for running SPEC2000 benchmarks
配置运行SPEC2000基准测试的文件

./config/examples

fs.py

Script to run FS simulation. Takes command line options and retrieves required information. Imports files from ./config/common
用于运行FS模拟的脚本。获取命令行选项以及检索需要的信息，写入./config/common中的文件

Similar files for testing memory system, running in SE mode. All of these import the files present in ./config/common
同样的文件用于测试存储系统，运行于SE模式，所有这些写入./config/common中存在的文件

./config/ruby

Scripts related to ruby memory system
用于关联ruby存储系统的脚本

./config/splash2

cluster.py

Configuration related to running splash2 parallel benchmarks 
Defines a class for each splash2 benchmark which inherits from LiveProcess class 
Each class contains info about executable, cmd, input variables 
Defines cache structure, number and type of clusters and number of cpus in a cluster - all obtained from command-line options 
Creates a system, adds system-wide objects, connects them. Picks the correct benchmark, assigns the workload ans runs the simulation
与运行splash2并行基准测试相关的配置
为每一个splash2基准测试定义了一个类，其继承了LiveProcess类
每一个类包含了有关可执行的，cmd，输入变量
定义了cache架构，数量和簇的种类以及簇中cpu的数目——所有这些均从命令行选项获得
创建了一个系统，添加全系统目标，连接他们，挑选正确的基准，分配工作量并且运行模拟

run.py

Same as cluster.py with minor changes - clusters are not present
与cluster.py基本类似，只有一些小的改变——簇没有出现

./config/topologies

Topologies for memory controllers
存储控制器的拓扑结构

./system

Low level software like firmware or bootloaders for use in simulated systems.
低层次软件，比如模拟系统中用到的固件或者引导装载程序

alpha - Alpha console and palcode. 
arm - A simple ARM bootloader.


BASE

./src/base/

types.hh

Defines global host-dependent types:
定义了全局依赖主机的类型：
Counter, Tick, and (indirectly) {int,uint}{8,16,32,64}_t. 
Cycles class, Addr, MicroPC, MicroPC operations,



flags.hh

Defines flag class, functions for modifying flags like set, unset etc.
定义了flag类，修改标志的函数比如set，unset等

output.hh

Handles printing of data to an output stream
操作数据打印到一个输出流中

./src/base/stats/

types.hh

Namespace Stats- Defines some basic stats types like Counter, VCounter, Result
Namespace Stats——定义了一些基础的stat类型比如Counter, VCounter, Result

info.hh

Info class to store information about various types of Stat like name, desc. 
For Distributions, 2d-Vectors etc. we store min_val, max_val etc.
Info类用于存储有关各类stat比如name，desc的信息
对于Distributions, 2d-Vectors等，我们存储min_val，max_val等


output.hh, text.hh, text.cc Printing of stats to output stream
将stat打印到输出流中

./src/base/vnc/

Vnc.py

VncInput class which derives from SimObject class 
VncServer class which derives from VncInput
VncInput类源自于SimObject类
VncServer类源自于VncInput类

Some files related to handling input to vncserver and setting up 
a vncserver
一些文件关联到输入进vncserver的操作以及设置一个vncserver


./src/base/loader/

object_file.hh

Class Object File - Architecture, OS. Mainly deals with how to read data from an object file
类对象文件——体系结构，操作系统，主要处理如何从一个对象文件中读取数据

All files in this folder provide some classes which can be used to read various types of object files
这个文件夹中的所有文件提供了一些类，这些类可用于读取各种类型的对象文件

refcnt.hh

RefCounted and RefCountingPtr classes which enable a class to be reference counted and provide automatic 
reference counting respectively.
RefCounted和RefCountingPtr类，其使一个类可被引用计数并且提供自动的分别引用计算

ARCH

./src/arch/generic/

Generic classes which can be used to perform specific functions using any ISA like decode_cache, debug_fualts, memhelpers.hh
一般的类，可用于使用任何ISA执行特定的功能，比如decode_cache, debug_fualts, memhelpers.hh

./src/arch/arm/

./insts

Classes which define what each instruction will do and to access information about instructions like branch, mem, misc, mult, etc.
类用于定义每一个指令或做的事情并且获取指令信息比如branch, mem, misc, mult等

./isa

./decoder

.isa files which define how to decode an arm.thumb instruction
.isa文件定义了如何解码arm.thumb的指令

./formats

.isa files which define various instruction formats like m5ops, branch, mem, etc.
.isa文件定义了各种指令格式比如m5ops，branch, mem,等

./insts

Declarations of execution methods used for different types
声明了用于不同类型的执行方式

PYTHON FOLDER

./m5/util/convert - Functions to convert a given string to numerical values related to memory size, clock period, network bandwidth etc.
./m5/util/convert——这些函数用于将一个给定的字符串转换为数值变量，这些变量与存储大小,时钟周期，网络带宽等有关

./m5/util/attrdict - Modified Dict types with capability to add and delete attributes and a heirarchical structure
./m5/util/attrdict——通过使用添加或者删除属性和层次结构的能力来修改字典类型

./m5/util/multidict - Dict of Dict and so on
./m5/util/multidict——字典的字典

./m5/util/orderdict - Ordered Dict
./m5/util/orderdict——有序的字典

./m5/util/smartdict - Dictionary class that holds strings, but intelligently converts those strings to other types depending on their usage
./m5/util/smartdict——字典类型用于保存字符串

./m5/util/sortedict -

./m5/util/region - Places data in regions and determines the type of overlap between two regions
./m5/util/region——将数据放置到区域中并且确定两个区域之间重叠的类型

./m5/util/init - Defines the error calls - panic, fatal, warn and inform. Several other utility functions
./m5/util/init——定义了错误调用——panic, fatal, warn and inform。其他的几个实用函数

./m5/internal/params.py - A simple function to load all modules starting with m5.internal.params
./m5/internal/params.py——一个简单的函数用于载入所有模块，从m5.internal.params开始

./m5/internal/init - Imports some modules used in the simulator like core, event, stats, etc.
./m5/internal/init——输入模拟器用到的一些模块，比如core, event, stats等

./m5/objects/init - Imports all modules starting with m5.objects
./m5/objects/init - 输入所有的模块，从m5.objects开始

./m5/config.py - Directory settings for m5
./m5/config.py——为m5设置目录

./m5/debug.py - Extracting debug flags from m5 and printing them
./m5/debug.py——从m5中提取debug的标志并且打印它们

./m5/event.py - Defines Event and Progress Event classes and related functions
/m5/event.py——定义了时间和进程时间类以及相关的函数

./m5/main.py - The main script invoked when gem5 is run. Option parsing, gem5 interactive console , main function which prints info while gem5 is running
./m5/main.py——当gem5运行时调用的main脚本。选项解析，gem5交互控制台，主函数在gem5运行时打印信息

./m5/options.py Option parser
./m5/options.py——选项解析器

./m5/params.py - Parameter description classes. Each class has a _params dictionary which maps parameter names to Param objects. Functions which generate C++ code 
needed as a pre-requisite for declaring certain C++ objects. Defines several functions which deal with parameters
./m5/params.py——参数描述类。每一个类有一个_params字典，其将变量名映射到Param对象。生成C++源码的函数需要声明特定的C++对象作为必要条件

./m5/proxy.py - Proxy object support
./m5/proxy.py——代理对象支持

./m5/ticks.py - Setting simulation accuracy and global frequency
./m5/ticks.py——设置仿真精度和全局频率

./m5/SimObject.py -

./m5/simulate.py - Functions to instantiate Simobjects used in the system, create checkpoints, restore from checkpoints, switch cpus etc. 
In short, this script is responsible for starting and ending a simulation
./m5/simulate.py——函数，用于实例化系统中所用的Simobjects，创建检查点，从检查点恢复，切换cpu等
简单来说，这个脚本为仿真的开始和结束负责

./m5/stats/init - Initialization, resetting, dumping, et. of statistics
./m5/stats/init——初始化，重置，dumping，以及统计

./swig

Swig files for the main module defined in m5
？？？

SIMULATION FOLDER

./src/sim

./arguments.hh 
Class arguments which has a thread context, number, data and methods which change or compare number field
参数类，拥有一个线程上下文，数据以及用于改变或者比较数域的方法

./async.hh 
Defines flags used to handle asynchronous simulator events
定义用于操作异步模拟器事件的标志

./byteswap.hh 
Provides endianness coversion utility functions
提供字节顺序的转换使用函数

./clocked_object.hh 
The ClockedObject class extends the SimObject with a clock and accessor functions to relate ticks to the cycles of the object.
ClockedObject类通过时钟和与对象时钟的tick相关的访问器函数扩展了SimObject

./core.hh 
Core simulator functionality such as time information, output directory and exit events. Few simple functions
核仿真器功能比如事件信息，输出目录以及退出事件，一些简单的功能

./eventq.hh 
Class Event derives from Serializable and is a friend of class EventQueue. EventQueueManager
事件类源于Serializable，并且是EventQueue类的助手

./serialize.hh 
Serialization interface declarations
串行化接口声明

./debug.hh 
Provides the definitions for some useful debugging functions. These are intended to be called from a debugger such as gdb
提供了一些有用的调试函数的定义。它们将会被gdb一类的调试器所调用

./drain.hh 
Coordinates draining of a system. Drainable class. Functions to perform draining
？？？

./faults.hh 
Various types of faults, their names and invoking functions.
各种类型的故障，它们的名称和调用的函数

./init.hh 
EmbeddedPython, EmbeddedSwig structs. Some initialization function and handler functions
嵌入式Python，嵌入式Swig的结构。一些初始化函数和操作函数

./insttracer.hh 
Class InstRecord. Class InstTracer which mostly derives from SimObject
InstRecord类，InstTracer类基本源自于SimObject

./microcoderom.hh 
Generic stub microcode ROM ISAs can use if they don’t need anything more
一般的存根魏玛ROM ISA可以被使用——如果它们不需要其他任何东西（？？？）

./main.cc

Sets up python and then calls initM5Python which loads the various embedded python modules 
into the python environment and then starts things running by calling m5Main.
建立Python，并且接着调用initM5Python，用于将各种嵌入式Python模块装载到Python环境
之后通过调用m5Main开始运行

./syscallreturn.hh

Class SyscallReturn. Successful and retval fields
SyscallReturn类，成功和返回值域

./process.hh

All the details that are related to a process running on a cpu 
class Process deriving from SimObject 
class LiveProcess deriving from Process
所有细节都与cpu上运行的进程相关
Process类源自于SimObjectProcess
LiveProcess类源自于Process

./pseudo_inst.hh

PseudoInst namespace which defines several functions which behave like instructions and 
perform several operations on a ThreadContext
PseudoInst命名空间，定义了几个函数，这些函数行为类似指令并且在线程上下文执行一些操作

./root.hh 
The root SimObject in the simulation hierarchy
在仿真层级中的root SimObject

serialize.hh

Functions to create and restore from checkpoints 
Serialize - create checkpoints Unserialize - Restore from checkpoints
函数用来创建和从检查点处恢复
？？？

./sim_events.hh 
Event to terminate simulation at a particular cycle/instruction 
CountedDrainEvent, CountedExitEvent 
Used to terminate simulation after some special event
在一个特定周期/指令处终止仿真的事件
CountedDrainEvent, CountedExitEvent 
用于在一些特定事件后终止仿真

./sim_exit.hh 
Functions which return the control to python after ending simulation
函数，用于结束仿真后将控制返回给Python

./sim_object.hh

Abstract superclass for simulation objects. Represents things that 
correspond to physical components and can be specified via the 
config file (CPUs, caches, etc.).
为模拟对象将超级类抽象化（？）。其表示的东西相当于物理组件并且可以通过config文件指定（CPU，cache等）

Methods used in starting and running a simulation
该方法用于开启并且运行仿真

./simulate.hh 
simulate method which returns SimLoopExitEvent
返回SimLoopExitEvent的仿真方法

./stat_control.hh 
Events related to dumping, resetting and registering statistics
跟转储，重置和寄存统计相关的事件

./syscall_emul.hh

Defines objects used to emulate syscalls from the target 
application on the host machine.
定义了用于从主机上目标应用程序进行仿真系统调用的对象

./syscallreturn.hh

SysCallReturn Class which decodes the return value of a system call
SysCallReturn类，对系统调用的返回值进行解码

./system.hh

Classes which define the system, ports, connections between system components
这些类定义了系统，端口，系统组件之间的连接

./tlb.hh

BaseTLB and GenericTLB classes

CPU

./src/cpu/

timebuf.hh

TimeBuffer and Wire classes. Friends of each other. Wire contains TimeBuffer 
Used for sending data between two objects
TimeBuffer和Wire类，互为对方的伙伴。Wire包含了TimeBuffer
用于在两个对象之间发送数据

activity.hh

Activity Recorder helper class that informs the CPU if it can switch over to being idle or not
活动记录助手类，通知CPU其是否能够切换到闲置状态

base.hh

CPUProgressEvent deriving from Event 
BaseCPU deriving from MemObject
CPUProgressEvent源自于Event
BaseCPU源自于MemObject

cpuevent.hh

CpuEvent class- Helps form a global list of events which need a pointer to a ThreadContext
CpuEvent类——有助于形成事件的全局列表，这些事件需要指针指向线程上下文

decodecache.hh

Cache of recent Virtual Memory decodings and retrieval mechanisms from cache
最近虚拟内存解码的cache和从cache中恢复的机制

exec_context.hh

ExecContext - Not a usable class. Only to demonstrate how ISA accesses CPU state
ExecContext——不是个可用的类，只被用来论证ISA如何存取CPU状态

fudesc.hh

FuDesc and OpDesc classes which define a functional unit and its operations.
FuDesc和OpDesc类，定义功能单位以及它的运作

inst_seq.hh

Used to order instructions in the ready list
用来处理处于就绪列表中的指令

static_inst.hh

StaticInst class - Machine Inst, Flags, OpClass, Num of Src, Dest regs, Flag Accessor Functions

thread_context.hh

ThreadContext Class Accessor and Modifier functions for all registers, memory ports and most of the 
architectural state of a CPU. It is a virtual class. 
So, we make use of ProxyThreadContext class to prevent the overhead of virtual calls
ThreadContext类访问器和调节器函数，适用于所有的寄存器，存储器口和CPU的大多数体系结构状态，这是个虚拟类
所以我们利用ProxyThreadContext类来防止虚拟调用的开销

profile.hh

ProfileNode and FunctionProfile classes
ProfileNode和FunctionProfile类

thread_state.hh

Struct for holding general thread state that is needed across CPU models. 
Very similar to thread_context with minor changes
结构体，用来存储一般的线程状态——需要在CPU模型中用到
跟thread_context非常相似，只有很小的改动

smt.hh

Changing the thread state and priority for smt support
为smt支持改变线程的状态和优先级

translation.hh

Captures the state of an address translation 
WholeTranslationState and DataTranslation Classes
捕获地址转换的状态

exectrace.hh 
ExeTraceRecord and ExeTracer classes

simple_thread.hh 
The SimpleThread object provides a combination of the ThreadState 
object and the ThreadContext interface
SimpleThread对象提供了一个ThreadState对象和ThreadContext界面的组合

quiesce_event.hh 
EndQuiesceEvent for timing out a quiesce instruction
EndQuiesceEvent用来令一个停顿指令超时

intr_control.hh 
Class to clear and post instructions of a particular CPU
这个类用来清除和布置特定CPU上的指令

legiontrace.hh 
LegionTraceRecord and LegionTrace

pc_event.hh 
PCEventQueue class which contains PCEvent class objects
PCEventQueue类包含PCEvent类对象

base_dyn_inst.hh 
Defines a dynamic instruction context 
All the functions and processes that happen in a simple processor 
are defined in this class. Including functions for writing, reading memory, 
starting and ending translation etc.
定义了一个动态指令上下文
所有函数和进程都发生在一个简单的处理器上——前述内容就是由这个类来定义
包含了用于写，读存储，开启和结束转换等等的函数


Python Files 
These files define the Python Objects, methods, files which point to the 
corresponding C++ object, using Cxx header and Cxx class variables
这些文件定义了python对象，方法，文件——这些都指向了相应的C++对象——通过使用C++头和C++类变量

CHECKER

./src/cpu/checker/

thread_context.hh 
Derived ThreadContext class for use with the Checker. The template 
parameter is the ThreadContext class used by the specific CPU being 
verified. This CheckerThreadContext is then used by the main CPU in 
place of its usual ThreadContext class. It handles updating the 
checker’s state any time state is updated externally through the 
ThreadContext.
衍生的ThreadContext类与chekcer一起使用。模板变量是由被认证的特定CPU所使用的ThreadContext类
CheckerThreadContext之后被主CPU在其通常的ThreadContext类的位置使用（？？？）
每当状态通过ThreadContext更新后，它就更新checker的状态

CheckerThreadContext - Actual Thread Context, Checker Thread, Checker CPU


cpu.hh 
CheckerCPU class derives from BaseCPU class. 
BaseCPU is an abstract class. So CheckerCPU 
has most of the methods and members replicated 
Templated Checker Class deriving from CheckerCPU 
which handles the checking/verifying functions
CheckerCPU类源自于BaseCPU类
BaseCPU是一个抽象类
所以CheckerCPU有很多方法和成员重复
Templated Checker类源自于CheckerCPU，后者操作检查/校验函数

cpu_impl.hh

SIMPLE

./src/cpu/simple

base.hh 
BaseSimpleCPU derives from BaseCPU 
CheckPcEventQueue - Seems to be the main function 
which moves instructions forward 
Lots of stats variables
BaseSimpleCPU源自于BaseCPU
CheckPcEventQueue——似乎是主函数
其将指令移动到很多stat变量前


atomic.hh 
AtomicSimpleCPU derives from BaseSimpleCPU 
TickEvent Struct containing a CPU, TickEvent, Process methods 
Main simulation loop - tick method
AtomicSimpleCPU源自于BaseSimpleCPU
TickEvent结构体包含了CPU，TickEvent，进程方法
主要的仿真循环——tick方式

timing.hh 
Class SplitMainSenderState to split memory access into two fragments 
It has some TLB and memory access functions in addition to 
Atomic functionality
SplitMainSenderState类将存储访问分成两个片段
除了原子函数外，它还拥有一些TLB和存储访问函数

PREDICTOR

./src/cpu/pred

btb.hh 
DefaultTLB class 
Very simple and straight forward implementation of BTB
非常简单和直接地实现BTB

ras.hh 
ReturnAddrStack class

sat_counter.hh 
Private counter class for the internal saturating counters. 
Implements an n bit saturating counter and provides methods to 
increment, decrement, and read it
私有计数器类，用于内部饱和计数器
实现n比特的内部计数器，并且提供增加和衰减以及读取它的方式

bpred_unit.hh 
Wrapper class to hold both the Branch Predictor and BTB 
Predictor Histroy Struct to maintain information required to 
update BTB, RAS etc.
Wrapper类用于保存分支预测器和BTB预测器历史结构体，以维护BTB，RAS等更新时所需要的信息

tournament.hh 
Implements a tournament branch predictor 
TournamentBP inherits from BPredUnit
实现了一个比赛分支预测器
TournamentBP继承自BPredUnit

2bit_local.hh 
Implements a local predictor that uses the PC to index into a table of 
counters. Contains a list of saturating counters.
实现了一个局部预测器

OUT OF ORDER

./src/cpu/o3/

base_dyn_inst.cc 
Makes an explicit instantiation of BaseDynInst templated class with 
O3CPUImpl
利用O3CPUImpl来生成BaseDynInst templated类的具现化

checker.hh 
Specific non-templated O3Checker derived class used for SimObject configuration.
特殊的非模板化O3Checker衍生的类，为SimObject配置所用

comm.hh 
Structures that define the information passed on from one stage to another stage of 
a superscalar pipeline 
Each struct contains a list of DynInstPtr 
Per thread variable like branchmisPredict, branchTaken etc. 
A special structure which defines all backward communication - TimeBufStruct
这个结构定义了超标量流水线中信息从一个阶段传到另一个阶段
每个结构体包含了一个DynInstPtrPer thread变量（像branchmisPredict，branchTaken等）的列表
一个特殊的结构体，其定义了所有的反向通讯——TimeBufStruct

commit.hh 
Templated DefaultCommit Class 
Has pointers to all the important structures and stages in the CPU 
All the important architectural updates are handled
模板化的DefaultCommit类
指针指向CPU中所有的重要结构体和阶段
所有重要的体系结构更新为其所用

decode.hh 
Because instructions are actually decoded when the StaticInst is created, 
this stage does not do much other than check any PC-relative branches 
DefaultDecode - Very similar to DefaultCommit class
因为当StaticInst被创建时，指令事实上已经被解码
这个阶段所做的并不比检查任何PC相关分支多出多少
DefaultDecode——与DefaultCommit类很像

dep_graph.hh 
Array of linked list that maintains the dependencies between 
producing instructions and consuming instructions
链表的数组，维持生产指令和消耗指令之间的相关性

dyn_inst.hh 
BaseO3DynInst deriving from BaseDynInst
BaseO3DynInst源自于BaseDynInst

fetch.hh 
DefaultFetch Class

free_list.hh 
SimpleFreeList class that simply holds the list of free integer and floating 
point registers.
SimpleFreeList类仅仅保存空闲整型和浮点寄存器的列表

fu_pool.hh 
FUPool class which maintains a list of arrays of FUunits with a specific 
Capability
FUPool类维护了特殊功能的FUunits的数组的列表

impl.hh 
Implementation specific struct that defines several key types to the 
CPU, the stages within the CPU, the time buffers, and the DynInst.
实现特定的结构体，定义了CPU中几种key的类型，CPU中的阶段，时间缓冲区，以及DynInst

inst_queue.hh 
Instruction Queue which holds and schedules intructions 
Gets information from FUs and MemUnit to track dependencies and 
resource availability
指令队列，保存并调度指令
从FU和MemUnit中获取信息以追踪相关性和资源可用性

lsq_unit.hh 
LSQUnit Class which implements Load and Store Queues
LSQUnit类，载入和存储队列

lsq.hh 
LSQ class Templated with Impl

mem_dep_unit.hh 
Memory Dependency Predictor
存储依赖预测器

regfile.hh 
Simple physical register file class. 
Methods to set and read int and fp registers
简单的物理寄存器文件类
设置和读取int以及fp寄存器的方法

scoreboard.hh 
Implements a simple scoreboard to track which registers are ready
实现一个简单的记分牌，以追踪哪个寄存器准备完毕

rob.hh 
ROB class. The ROB is largely what drives squashing.
ROB类，ROB是驱动压缩的主要部分

rename.hh 
DefaultRename Class which handles both single threaded and SMT rename
DefaultRename类，操作单个线程化和SMT重命名

thread_context.hh 
Derived ThreadContext for use with O3CPU
衍生的ThreadContext，和O3CPU一起使用

thread_state.hh 
O3ThreadState class that has various thread state, such as the status, the 
current instruction being processed, whether or not the thread has 
a trap pending or is being externally updated, the ThreadContext 
pointer, etc.
O3ThreadState类有各种线程情形，比如状态（status和state区别？），当前正在处理的指令，线程是否有自陷悬挂或者已经外部更新，ThreadContext指针，等等

store_set.hh 
Implements a store set predictor for determining if memory insts 
are dependent on each other
？？？？

deriv.hh 
DeriveO3CPU derived from templated FullO3CPU
DeriveO3CPU源自于模板化FullO3CPU

iew.hh 
DefaultIEW class which implements the iew stage of the pipeline
DefaultIEW类，实现了流水线的iew阶段

cpu_policy.hh 
SimpleCPUPolicy Struct that defines the key classes to be used by the CPU. 
All classes use the typedefs defined here to determine what are the 
classes of the other stages and communication buffers.
SimpleCPUPolicy结构体定义了CPU所用到的关键类
所有类使用typedefs定义，以确定其他阶段和通信缓冲区的类是什么

cpu.hh 
BaseO3CPU deriving from BaseCPU 
FullO3CPU deriving from BaseO3CPU 
FullO3CPU class has each of the stages (fetch through commit) 
within it, as well as all of the time buffers between stages.
BaseO3CPU来自于BaseCPU
FullO3CPU来自于BaseO3CPU
FullO3CPU类拥有每一个阶段，以及所有阶段之间的时间缓冲区
